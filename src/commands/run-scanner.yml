description: >
  Commands runs SonarQube scanner and uploads results

parameters:
  # Analysis Parameters
  project_key:
    type: string
    description: "Unique key of the Sonarqube project"
  project_name:
    type: string
    description: "Name of the project that will be displayed on the web interface"
    default: ""
  sources:
    type: string
    description: "Comma-separated paths to directories containing main source files"
    default: src
  tests:
    type: string
    description: "Comma-separated paths to directories containing test source files"
    default: src
  # Test Converage
  js_lcov_report_paths:
    type: string
    description: "Comma-delimited list of paths to LCOV coverage report files. Paths may be absolute or relative to project root"
    default: reports/coverage/lcov.info
  ruby_simplecov_report_paths:
    type: string
    description: "Comma-delimited list of paths to SimpleCov coverage report files. Paths may be absolute or relative to project root"
    default: ""
  test_inclusions:
    type: string
    description: "Comma-delimited list of paths to test files to include as test"
    default: "**/*.test.ts"
  # Test Execution
  test_execution_report_path:
    type: string
    description: "Comma-delimited list of paths to execution reports in the Generic Execution Data format. The paths must be relative to the project's base directory (root module)"
    default: reports/execution-report.xml
  # Dependency Check
  xml_report_path:
    type: string
    description: "XML Report Path"
    default: odc-reports/dependency-check-report.xml
  json_report_path:
    type: string
    description: "JSON Report Path"
    default: odc-reports/dependency-check-report.json
  html_report_path:
    type: string
    description: "HTLM Report Path"
    default: odc-reports/dependency-check-report.html
  # Server info
  host_url:
    type: string
    description: "The server URL. You can leave blank and provide env var `SONARQUBE_SERVER_URL`"
    default: ""
  login_token:
    type: string
    description: "The login or authentication token of a SonarQube user with Execute Analysis permission on the project. You can leave blank and provide env var `SONARQUBE_SERVER_LOGIN`"
    default: ""
  # Client CLI
  scanner_version:
    type: string
    description: "SonarQube Scanner Version"
    default: "5.0"
  build_pr:
    type: boolean
    description: "Run command for branch or PR"
    default: false
  pr_target_branch:
    type: string
    description: "Pull Request target branch"
    default: staging
  root_dir:
    type: string
    description: "Root location of the sources to analyze"
    default: "."
  node_max_space:
    type: string
    description: "Node max space"
    default: "4096"

steps:
  - run:
      name: Run Sonarqube Scanner
      command: |
        if [ -z "${SERVER_URL}" ]; then
            SERVER_URL=$SONARQUBE_SERVER_URL
        fi
        if [ -z "${LOGIN_TOKEN}" ]; then
            LOGIN_TOKEN=$SONARQUBE_SERVER_LOGIN
        fi
        if [ -z "${PROJECT_NAME}" ]; then
            PROJECT_NAME=$PROJECT_KEY
        fi
        SONAR_CMD_SCOPE="-Dsonar.branch.name=$CIRCLE_BRANCH"
        if [ "${BUILD_PR}" = 1 ]; then
          SONAR_CMD_SCOPE="-Dsonar.pullrequest.key=$CIRCLE_PULL_REQUEST -Dsonar.pullrequest.branch=$CIRCLE_BRANCH -Dsonar.pullrequest.base=$PR_TARGET_BRANCH"
        fi
        echo "BUILD_PR ${BUILD_PR}"
        echo "SONAR_CMD_SCOPE ${SONAR_CMD_SCOPE}"
        echo "CIRCLE_PULL_REQUEST ${CIRCLE_PULL_REQUEST}"

        # Function to expand wildcards in a comma-separated list
        expand_wildcards() {
            IFS=',' read -ra ADDR \<<< "$1"
            for i in "${ADDR[@]}"; do
                # Expand wildcard and append to the list
                for file in << parameters.root_dir >>/$i; do
                    expanded="$expanded,$file"
                done
            done
            echo "${expanded:1}" # Removes leading comma
        }

        # Expand wildcards in parameters
        sources=$(expand_wildcards "<< parameters.sources >>")
        tests=$(expand_wildcards "<< parameters.tests >>")
        js_lcov_report_paths=$(expand_wildcards "<< parameters.js_lcov_report_paths >>")
        test_execution_report_path=$(expand_wildcards "<< parameters.test_execution_report_path >>")

        docker run --rm -v $(pwd):$(pwd) sonarsource/sonar-scanner-cli:<< parameters.scanner_version >> \
          -Dsonar.host.url=$SERVER_URL \
          -Dsonar.login=$LOGIN_TOKEN \
          -Dsonar.projectBaseDir=$(pwd) \
          -Dsonar.projectKey=<< parameters.project_key >> \
          -Dsonar.projectName="$PROJECT_NAME" \
          -Dsonar.sources="$sources" \
          -Dsonar.tests="$tests" \
          <<# parameters.js_lcov_report_paths >>-Dsonar.javascript.lcov.reportPaths=$js_lcov_report_paths<</ parameters.js_lcov_report_paths >> \
          <<# parameters.test_execution_report_path >>-Dsonar.testExecutionReportPaths=$test_execution_report_path<</ parameters.test_execution_report_path >> \
          <<# parameters.ruby_simplecov_report_paths >>-Dsonar.ruby.coverage.reportPaths=<< parameters.root_dir >>/<< parameters.ruby_simplecov_report_paths >><</ parameters.ruby_simplecov_report_paths >> \
          -Dsonar.test.inclusions="$TEST_INCLUSIONS" \
          -Dsonar.dependencyCheck.xmlReportPath=<< parameters.root_dir >>/<< parameters.xml_report_path >> \
          -Dsonar.dependencyCheck.jsonReportPath=<< parameters.root_dir >>/<< parameters.json_report_path >> \
          -Dsonar.dependencyCheck.htmlReportPath=<< parameters.root_dir >>/<< parameters.html_report_path >> \
          -Dsonar.javascript.node.maxspace=<< parameters.node_max_space >> \
          $SONAR_CMD_SCOPE
      environment:
        SERVER_URL: << parameters.host_url >>
        LOGIN_TOKEN: << parameters.login_token >>
        PROJECT_KEY: << parameters.project_key >>
        PROJECT_NAME: << parameters.project_name >>
        TEST_INCLUSIONS: << parameters.test_inclusions >>
        BUILD_PR: << parameters.build_pr >>
        PR_TARGET_BRANCH: << parameters.pr_target_branch >>
